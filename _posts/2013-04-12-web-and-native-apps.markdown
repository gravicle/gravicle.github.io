---
layout: post
title: Web and native apps
date: 2013-04-12 21:07:16.000000000 -05:00
---
[drop_caps]A[/drop_caps]fter <a href="https://itunes.apple.com/us/app/dark-sky-weather-radar-hyperlocal/id517329357?mt=8">Dark Sky</a>, the guys at The Dark Sky Company went on to develop their own weather service, <a href="http://forecast.io/">Forecast</a>, with a very neat API for developers to leverage the weather data and beautiful visualizations into their own apps. Curiously, Forecast is Web-app, even on iOS devices, and a great one at that. Today, the developers <a href="http://blog.forecast.io/its-not-a-web-app-its-an-app-you-install-from-the-web/">voiced their opinion</a> about the web-app vs native <a href="http://daringfireball.net/linked/2011/12/14/winer-native-apps">debate</a>.

I have been meaning to talk about this for a while and have had lengthy discussions with friends about the same. First and foremost, <a href="http://inessential.com/2011/12/13/apps_and_web_apps_and_the_future">Brent Simmons’ take</a> is perfectly acceptable to me. Now, the gist of the debate is performance. Even more important to the discussion is knowing that the idea of web-apps being <em>always</em> slower than native apps is now a <a href="https://twitter.com/taylorcarrigan/status/322886942184333312">preconception</a>. Certainly, native code performs well on corresponding hardware and hence, well coded native apps always have an advantage. However, browsers and JavaScript performance has been escalating lately. On desktops, it’s already at the point where improvements only aid edge cases. On mobile, browsers are scaling JS performance in multiples every generation. Recent initiatives from Google, Mozilla and Apple to redo the rendering engines from ground up will result in mobile browsers performing at unprecedented speeds.

I believe that JS performance is not the bottleneck in web-app performance anymore. It’s <strong>skill</strong>. From the <a href="http://blog.forecast.io/its-not-a-web-app-its-an-app-you-install-from-the-web/">Forecast blog</a>:
<blockquote>I don’t think the reason is a technical one. Granted, some apps must be native: OpenGL-based games, for example, or apps that access hardware capabilities that are not yet exposed to the browser (a shrinking list); but I don’t buy the argument that native SDKs allow you to create interfaces that are inherently better, smoother, more dynamic — or more delightful — than what is possible via HTML5. It’s 2013, and mobile browser technology has advanced tremendously in the past few years: hardware accelerated transforms and animations have made it easy to create perfectly smooth, jitter-free, interfaces, and there is no question in my mind that CSS is a more powerful way to layout dynamic content than Interface Builder.</blockquote>
<a href="http://pattern.dk/sun/">Sun</a> is the most amazing web-app that I could find. Very fluid transitions and animations. After the initial wait for data to load, things are snappy and touch works great. <a href="http://forecast.io/">Forecast</a> is another great example. Web apps are technically very plausible. It takes someone who knows browsers inside out to create one, not quite unlike native apps.

I would also like to address one more misconception about web-apps. It’s considered that the most important reason for existence of web-apps is their cross-platform compatibility. Develop once, deploy everywhere. This is a stupid idea. It has never worked before and it never will. It was the promise of Java, Adobe AIR and Flash. Apps looked terrible and performed even worse. They did not keep pace with the platforms and eventually, they all fell through the cracks. The idea of ubiquitous compatibility is a pie in the sky. In practice, is bleeds shit. Users get used to with the user experience of the OS (the interactions, the interface elements, the design language). Most find a disruption in this experience subpar. Cross-platform development cannot possibly create a native experience. It’ll carry over the least common denominator of all the supported platforms. That’s shit.

Well conceived web-apps look like apps, not websites. But they do not try to emulate native OS elements. The web has it’s own design language and paradigms and good apps adhere to that. But the most important reason why web-apps are not one-size-fits-all is because they need a lot of platform-specific optimizations to work well. Safari on iOS, Chrome on Android, IE on Windows Phone, and desktop Webkit render things differently, scroll differently, have different defaults, hardware, and most importantly, user expectations. Web-apps, well executed web-apps, are very platform sensitive and require immense attention to the nuances and <a href="https://github.com/ftlabs/fastclick">bugs</a> of the particular environment.

So, why develop web-apps? Because one loves to develop using web technologies or because Obj-C and Cocoa looks like gibberish to them. Today, in 2013, dismissing web-apps is everything but wise.
